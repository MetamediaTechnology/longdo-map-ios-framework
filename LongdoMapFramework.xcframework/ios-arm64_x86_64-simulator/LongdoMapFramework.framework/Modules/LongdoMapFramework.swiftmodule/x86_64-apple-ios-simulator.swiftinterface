// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LongdoMapFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import CoreLocation
import Foundation
@_exported import LongdoMapFramework
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LongdoTurn : Swift.Int {
  case Left
  case Right
  case SlightLeft
  case SlightRight
  case Unknown
  case Straight
  case Tollway
  case Arrive
  case Ferry
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LongdoLocale : Swift.String {
  case English
  case Thai
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class LongdoMap : WebKit.WKWebView, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency public var apiKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public var server: Swift.String
  @_Concurrency.MainActor @preconcurrency public var options: LongdoMapFramework.LongdoMap.Option
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isInspectable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_inheritsConvenienceInitializers public class Option : ObjectiveC.NSObject {
    public var layer: LongdoMapFramework.LongdoMap.LDStatic
    public var zoom: Swift.Int
    public var zoomRange: Swift.ClosedRange<Swift.Int>
    public var location: CoreLocation.CLLocationCoordinate2D
    public var lastView: Swift.Bool
    public var onReady: (() -> Swift.Void)?
    @objc override dynamic public init()
    public func toDictionary() -> [Swift.String : Any]
    @objc deinit
  }
  public struct LDStatic : Swift.Hashable {
    public let type: Swift.String
    public let name: Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LongdoMapFramework.LongdoMap.LDStatic, b: LongdoMapFramework.LongdoMap.LDStatic) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LDFunction : Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LongdoMapFramework.LongdoMap.LDFunction, b: LongdoMapFramework.LongdoMap.LDFunction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LDObject : Any, Swift.Equatable {
    public static func == (lhs: LongdoMapFramework.LongdoMap.LDObject, rhs: LongdoMapFramework.LongdoMap.LDObject) -> Swift.Bool
    public let type: Swift.String
  }
  @_Concurrency.MainActor @preconcurrency public func ldstatic(_ type: Swift.String, with name: Swift.String) -> LongdoMapFramework.LongdoMap.LDStatic
  @_Concurrency.MainActor @preconcurrency public func ldobject(_ type: Swift.String, with params: [Any]) -> LongdoMapFramework.LongdoMap.LDObject
  @_Concurrency.MainActor @preconcurrency public func ldfunction(_ function: Swift.String) -> LongdoMapFramework.LongdoMap.LDFunction
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency public func render()
  @_Concurrency.MainActor @preconcurrency public func preCacheTiles(x: Swift.ClosedRange<Swift.Int>, y: Swift.ClosedRange<Swift.Int>, zoom: Swift.Int, progress: @escaping (_ percent: Swift.Double) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func clearCache()
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor @preconcurrency public func call(method: Swift.String, args: [Any]?, completionHandler: @escaping ((Any?) -> Swift.Void)) -> Any?
  @_Concurrency.MainActor @preconcurrency public func call(method: Swift.String, args: [Any]?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func objectCall(ldobject: LongdoMapFramework.LongdoMap.LDObject, method: Swift.String, args: [Any]?) -> Any?
  @objc deinit
}
extension LongdoMapFramework.LongdoTurn : Swift.Equatable {}
extension LongdoMapFramework.LongdoTurn : Swift.Hashable {}
extension LongdoMapFramework.LongdoTurn : Swift.RawRepresentable {}
extension LongdoMapFramework.LongdoLocale : Swift.Equatable {}
extension LongdoMapFramework.LongdoLocale : Swift.Hashable {}
extension LongdoMapFramework.LongdoLocale : Swift.RawRepresentable {}
